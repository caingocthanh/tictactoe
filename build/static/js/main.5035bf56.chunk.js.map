{"version":3,"sources":["tictacto_final_2505.js","serviceWorker.js","index.js"],"names":["Square","props","winIndex","index","react_default","a","createElement","className","onClick","style","background","value","Board","i","_this","this","win","calculateWinner","squares","arrSquares","j","k","arrSquares1","push","renderSquare","React","Component","typecall","lines","length","_lines$i","Object","slicedToArray","b","c","Game","_this2","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","xIsNext","stepNumber","location","isBackStep","isSort","movedStore","isAsc","MovedSort","bind","assertThisInitialized","slice","CalLocation","setState","concat","step","movelist","ml","reverse","isDesc","status","messenger","_this3","current","winner","moves","map","move","desc","key","data-value","jumpTo","tictacto_final_2505_Board","handleClick","color","fontSize","fontWeight","textAlign","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","tictacto_final_2505","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5035bf56.chunk.js","sourcesContent":["import React from 'react';\r\nimport './tictacto.css';\r\n\r\nfunction Square(props){\r\n    //for require 5\r\n    if(props.winIndex){//is component type function, can not use this\r\n        if(props.index===props.winIndex[0] ||\r\n            props.index===props.winIndex[1] ||\r\n            props.index===props.winIndex[2]){\r\n                return (\r\n                    <button \r\n                    className=\"square\"\r\n                    onClick={props.onClick}\r\n                    style={{background:'red'}}\r\n                    >\r\n                        {props.value}\r\n                    </button>\r\n                );\r\n        }\r\n        else{\r\n            return (\r\n                <button \r\n                className=\"square\"\r\n                onClick={props.onClick}\r\n                >\r\n                    {props.value}\r\n                </button>\r\n            );\r\n        }\r\n    }//end require 5\r\n        return (\r\n            <button \r\n            className=\"square\"\r\n            onClick={props.onClick}\r\n            >\r\n                {props.value}\r\n            </button>\r\n        );\r\n}\r\n\r\nclass Board extends React.Component{\r\n    //call based on conten of render let access function square\r\n    renderSquare(i){\r\n        //for require 5\r\n        const winIndex= \r\n        this.props.win ? calculateWinner(this.props.squares,2) : null;\r\n        return (\r\n        <Square winIndex={winIndex}\r\n            index={i}\r\n            value={this.props.squares[i]}\r\n            onClick={()=>this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n    \r\n    //render run first\r\n    render(){\r\n        //for require 3\r\n        let arrSquares=[];\r\n        let j=0;\r\n        for(let i=0;i<3;i++){\r\n            let k=0;\r\n            let arrSquares1=[];\r\n\r\n            while(k<3){\r\n                //const val=this.renderSquare(j);\r\n                //arrSquares1.push(val); //not \r\n                arrSquares1.push(this.renderSquare(j))\r\n                if(k===2){\r\n                    arrSquares.push(<div className=\"board-row\">{arrSquares1}</div>);\r\n                }\r\n                j++;\r\n                k++;\r\n            }\r\n        }\r\n        return (\r\n            <div>\r\n                {arrSquares}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            history:[\r\n                {\r\n                    //constructor array element have 9 elements null\r\n                    squares: Array(9).fill(null)\r\n                }\r\n            ],\r\n            //constructor step first: X\r\n            xIsNext:true,\r\n            stepNumber: 0,\r\n            //For require 1\r\n            location:[],\r\n            /*\r\n            For requires 2\r\n            Check state click of button previous step\r\n            Default: unClicked\r\n            */\r\n            isBackStep:false,\r\n            //for require 4\r\n            isSort: false,\r\n            movedStore: [],\r\n            isAsc: true\r\n        };\r\n        this.MovedSort=this.MovedSort.bind(this);\r\n    }\r\n    handleClick(i){\r\n        const history=this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current=history[history.length-1];\r\n        const squares=current.squares.slice();\r\n        const location=this.state.location.slice(0,this.state.stepNumber);\r\n        location.push(CalLocation(i));\r\n        \r\n\r\n        if(calculateWinner(squares,1) || squares[i]){\r\n            return;\r\n        }\r\n\r\n        squares[i]=this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history:history.concat([{\r\n                squares:squares\r\n            }]),\r\n            stepNumber:history.length,\r\n            xIsNext:!this.state.xIsNext,\r\n            //for require 1\r\n            location:location,\r\n            //for require 2\r\n            isBackStep:false,\r\n            isSort: false,\r\n            //for require 4\r\n            movedStore: []\r\n        });\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber:step,\r\n            xIsNext:(step % 2)===0,\r\n            /*\r\n            Check state click of button previous step\r\n            for require 2\r\n            */\r\n            isBackStep:true,\r\n            isSort: false,\r\n            movedStore:[]\r\n        });\r\n    }\r\n\r\n    //for require 4\r\n    MovedSort(movelist)\r\n    {\r\n        const ml=[].concat(movelist).reverse();\r\n        const isDesc=!this.state.isAsc;\r\n        \r\n        this.setState({\r\n            isAsc:isDesc,\r\n            isSort: true,\r\n            movedStore: ml\r\n        });\r\n    }\r\n\r\n    render(){\r\n        const history=this.state.history;\r\n        const current=history[this.state.stepNumber];\r\n        const winner=calculateWinner(current.squares,1);\r\n        \r\n\r\n        const moves=history.map(\r\n            (step,move)=>{\r\n                const desc=move ? 'Go to move #'+ move +' - Location: '+this.state.location[move-1]:\r\n                'Go to game start - Not location';\r\n\r\n                /**Begin-Answer for require 2 in tutorial: Tic Tac Toe */\r\n                if(this.state.isBackStep && this.state.stepNumber===move){\r\n                    return (\r\n                        <li key={move} data-value={move}>\r\n                            <button\r\n                             onClick={()=>this.jumpTo(move)}\r\n                             >\r\n                                    <b>{desc}</b>\r\n                            </button>\r\n                        </li>\r\n                    );\r\n                }\r\n\r\n                /**End-Answer for require 2 in tutorial: Tic Tac Toe */\r\n                return (\r\n                    <li key={move} data-value={move}>\r\n                        <button onClick={()=>this.jumpTo(move)}>\r\n                            {desc}\r\n                        </button>\r\n                    </li>\r\n                );\r\n            }\r\n        );\r\n\r\n        let status;\r\n        let messenger;\r\n        if (winner) {\r\n            status = 'Winner: ' + winner;\r\n          } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n            if(9<=this.state.stepNumber){//because exists 1 element that squares[i]=null\r\n                messenger= \"DO NOT WIN OR LOSE\";\r\n            }\r\n          }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"game\">\r\n                    <div className=\"game-board\">\r\n                        <Board\r\n                        win={winner}\r\n                        squares={current.squares}//transaction array null at run first\r\n                        onClick={(i)=>this.handleClick(i)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"game-info\">\r\n                        <div>\r\n                            {status} \r\n                            |                \r\n                            <button\r\n                                onClick={\r\n                                    ()=>\r\n                                    this.MovedSort(\r\n                                        (this.state.movedStore.length) ? \r\n                                        this.state.movedStore : \r\n                                        moves\r\n                                        )}\r\n                                >\r\n                                {this.state.isAsc ? 'Sort by Desc' : 'Soft by Asc'}\r\n                            </button>\r\n                        </div>\r\n                        <hr/>\r\n                        <div>{this.state.isSort ? this.state.movedStore : moves}</div>\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n                <div \r\n                style={{\r\n                    background:'green', \r\n                    color:'white', \r\n                    fontSize:25, \r\n                    fontWeight:\"bold\",\r\n                    textAlign:\"center\"\r\n                }}\r\n                >\r\n                {messenger}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares, typecall){\r\n    const lines=[\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n          if(typecall && typecall===1){\r\n              return squares[a];\r\n          }\r\n          else{\r\n              return lines[i];\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n}\r\n\r\nfunction CalLocation(i)\r\n{\r\n    let location=[\r\n        ['X=0, Y=0'],\r\n        ['X=0, Y=1'],\r\n        ['X=0, Y=2'],\r\n        ['X=1, Y=0'],\r\n        ['X=1, Y=1'],\r\n        ['X=1, Y=2'],\r\n        ['X=2, Y=0'],\r\n        ['X=2, Y=1'],\r\n        ['X=2, Y=2']\r\n    ];\r\n\r\n    return location[i];\r\n}\r\n\r\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Tictactoe from './tictacto_final_2505';\n\n//import Style from './style';\nimport * as serviceWorker from './serviceWorker';\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n//ReactDOM.render(<Style/>,document.getElementById('title'));\n\n//element\n//ReactDOM.render(<App/>,document.getElementById('root'));\n/*\nsetInterval(() => {\n    ReactDOM.render(<App/>,document.getElementById('root'));\n}, 1000);\n*/\n\n//STATE AND CYCLE\n//ReactDOM.render(<Clock/>,document.getElementById(\"root\"));\n//EVENT - HANDING\n//ReactDOM.render(<EventHanding/>,document.getElementById(\"root\"));\n//Codition render\nReactDOM.render(<Tictactoe/>,document.getElementById(\"root\"));\n\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//default after setting\n//serviceWorker.unregister();\n//use register faster\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nserviceWorker.register();\n"],"sourceRoot":""}